@model PoochPositiveTraining.Models.Dog

<script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-min.js"></script>

<div class="row">
    <div class="form-vertical row">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.DogID)
        @Html.HiddenFor(model => model.ThumbnailID)

        <div class="form-group">
            <div class="col-md-3">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { autofocus = "autofocus", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-3">
                @Html.LabelFor(model => model.Breed, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Breed, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Breed, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-3">
                @Html.LabelFor(model => model.Birthday, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Birthday, new { htmlAttributes = new {id="birthday", data_bind="value: birthday", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Birthday, "", new { @class = "text-danger" })
                <span data-bind="text: age"></span>
        </div>

        <div class="col-md-3">
            @Html.LabelFor(model => model.ClientID, "Owner", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("ClientID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ClientID, "", new { @class = "text-danger" })
        </div>
    </div>
</div>

    <div class="row top-buffer">
        <div class="form-group col-md-3">
            @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label text-right" })
            <div>
                @Html.TextAreaFor(model => model.Comments, 10, 40, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="dropbox text-center col-md-3">
            <input type="file" name="upload" id="files" class="dropbox__file" accept="image/*" single />
            <label for="files" class="btn btn-default"><strong>Choose image</strong></label>
            <div class="dropzone">
                @{
                    if (Model != null && Model.ThumbnailID != 0)
                    {
                        <img src="~/File?id=@Model.ThumbnailID" default-image="/images/thumbnails/DogNoImage.png" class="thumbnail" alt="thumbnail" />
                    }
                    else
                    {
                        <img src="~/images/thumbnails/DogNoImage.png" class="thumbnail" alt="thumbnail" />
                    }
                }
            </div>
        </div>

        <div class="col-md-6 text-center">
            <div class="component">
                <img class="component-image" src="~/images/thumbnails/DogNoImage.png" alt="image for resizing">
                <button type="button" class="btn btn-crop js-crop">Crop<img class="icon-crop" src="~/images/crop.svg"></button>
                <button type="button" class="btn btn-done js-done">Done <span class="glyphicon glyphicon-ok"></span></button>
            </div>
        </div>
    </div>

</div>

<script>
    document.onreadystatechange = function () {
        if (document.readyState == "complete") {
            var bday = document.getElementById('birthday').value;
            var viewModel = {
                birthday: ko.observable(bday)
            };

            viewModel.age = ko.dependentObservable(function () {
                var now = new Date(Date()).getTime();
                var birth = new Date(this.birthday()).getTime();
                var months = Math.floor((now - birth) / 2629746000);

                if (months < 0 || isNaN(months)) {
                    return null;
                } else if (months < 24) {
                    return months + " months old";
                } else {
                    return Math.floor(months / 12) + " years old";
                }
            }, viewModel);
            ko.applyBindings(viewModel);
        }};
</script>

